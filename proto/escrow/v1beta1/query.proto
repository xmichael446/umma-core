syntax = "proto3";
package ummachain.ummacore.escrow.v1beta1;

import "google/api/annotations.proto";
import "escrow/v1beta1/types.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/umma-chain/umma-core/x/escrow/types";

// Query provides defines the gRPC querier service
service Query {
  // Escrow queries the escrow by the specified id
  rpc Escrow(QueryEscrowRequest) returns (QueryEscrowResponse) {
    option (google.api.http).get = "/escrow/escrow/{id}";
  }

  // Escrows queries escrows by the specified key-value pairs
  rpc Escrows(QueryEscrowsRequest) returns (QueryEscrowsResponse) {
    option (google.api.http).get = "/escrow/escrows";
  }
}

// QueryEscrowRequest is the request type for the Query/Escrow RPC method
message QueryEscrowRequest { string id = 1; }

// QueryEscrowResponse is the response type for the Query/Escrow RPC method
message QueryEscrowResponse { v1beta1.Escrow escrow = 1; }

// QueryEscrowsRequest is the request type for the Query/Escrows RPC method
message QueryEscrowsRequest {
  string seller = 1;  // The4 seller address
  string state = 2;   // The state of the escrow object. It must be one of "open" or "expired".
  string object_key = 3;  // All the escrows has a unique key, in the starname objects the domain_name will be the key, and the account_name*domain_name will be account name.
  uint64 pagination_start = 4;
  uint64 pagination_length = 5;
}

// QueryEscrowsResponse is the response type for the Query/Escrows RPC method
message QueryEscrowsResponse {
  repeated v1beta1.Escrow escrows = 1 [ (gogoproto.nullable) = false ];
}