// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iov/escrow/v1beta1/test.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TestObject defines a transferable object used for testing
type TestObject struct {
	Id                  uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner               github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	NumAllowedTransfers int64                                         `protobuf:"varint,3,opt,name=num_allowed_transfers,json=numAllowedTransfers,proto3" json:"num_allowed_transfers,omitempty"`
}

func (m *TestObject) Reset()         { *m = TestObject{} }
func (m *TestObject) String() string { return proto.CompactTextString(m) }
func (*TestObject) ProtoMessage()    {}
func (*TestObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_869357724f579c88, []int{0}
}
func (m *TestObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestObject.Merge(m, src)
}
func (m *TestObject) XXX_Size() int {
	return m.Size()
}
func (m *TestObject) XXX_DiscardUnknown() {
	xxx_messageInfo_TestObject.DiscardUnknown(m)
}

var xxx_messageInfo_TestObject proto.InternalMessageInfo

// TestTimeConstrainedObject defines a transferable object with a time constrain
// used for testing
type TestTimeConstrainedObject struct {
	Id         uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Expiration uint64                                        `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (m *TestTimeConstrainedObject) Reset()         { *m = TestTimeConstrainedObject{} }
func (m *TestTimeConstrainedObject) String() string { return proto.CompactTextString(m) }
func (*TestTimeConstrainedObject) ProtoMessage()    {}
func (*TestTimeConstrainedObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_869357724f579c88, []int{1}
}
func (m *TestTimeConstrainedObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestTimeConstrainedObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestTimeConstrainedObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestTimeConstrainedObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestTimeConstrainedObject.Merge(m, src)
}
func (m *TestTimeConstrainedObject) XXX_Size() int {
	return m.Size()
}
func (m *TestTimeConstrainedObject) XXX_DiscardUnknown() {
	xxx_messageInfo_TestTimeConstrainedObject.DiscardUnknown(m)
}

var xxx_messageInfo_TestTimeConstrainedObject proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TestObject)(nil), "ummachain.ummacore.escrow.v1beta1.TestObject")
	proto.RegisterType((*TestTimeConstrainedObject)(nil), "ummachain.ummacore.escrow.v1beta1.TestTimeConstrainedObject")
}

func init() { proto.RegisterFile("iov/escrow/v1beta1/test.proto", fileDescriptor_869357724f579c88) }

var fileDescriptor_869357724f579c88 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0xbd, 0x4e, 0x02, 0x41,
	0x14, 0x85, 0x77, 0x00, 0x2d, 0x26, 0xc6, 0x62, 0xd5, 0x04, 0x49, 0x1c, 0x09, 0x15, 0x89, 0x61,
	0x27, 0xe8, 0x13, 0x80, 0x85, 0xb1, 0x32, 0xd9, 0x50, 0xd9, 0x90, 0xd9, 0x9d, 0x2b, 0x8e, 0xb2,
	0x73, 0xc9, 0xdc, 0xe1, 0xc7, 0xb7, 0xb0, 0xb0, 0xf1, 0x8d, 0x28, 0x29, 0xad, 0x8c, 0xc2, 0x5b,
	0x58, 0x19, 0x76, 0xc1, 0xf0, 0x02, 0x56, 0x33, 0xb9, 0xe7, 0x9c, 0x9c, 0x93, 0x7c, 0xfc, 0xcc,
	0xe0, 0x44, 0x02, 0xa5, 0x0e, 0xa7, 0x72, 0xd2, 0x4e, 0xc0, 0xab, 0xb6, 0xf4, 0x40, 0x3e, 0x1a,
	0x39, 0xf4, 0x18, 0xd6, 0xc8, 0x2b, 0x67, 0x55, 0x06, 0x3a, 0x9a, 0x45, 0x85, 0x2d, 0xda, 0xd8,
	0x6a, 0xc7, 0x03, 0x1c, 0x60, 0x6e, 0x93, 0xeb, 0x5f, 0x91, 0x68, 0xbc, 0x33, 0xce, 0x7b, 0x40,
	0xfe, 0x2e, 0x79, 0x82, 0xd4, 0x87, 0x87, 0xbc, 0x64, 0x74, 0x95, 0xd5, 0x59, 0xb3, 0x12, 0x97,
	0x8c, 0x0e, 0x6f, 0xf8, 0x1e, 0x4e, 0x2d, 0xb8, 0x6a, 0xa9, 0xce, 0x9a, 0x07, 0xdd, 0xf6, 0xcf,
	0xe7, 0x79, 0x6b, 0x60, 0xfc, 0xe3, 0x38, 0x89, 0x52, 0xcc, 0x64, 0x8a, 0x94, 0x21, 0x6d, 0x9e,
	0x16, 0xe9, 0x67, 0xe9, 0x5f, 0x46, 0x40, 0x51, 0x27, 0x4d, 0x3b, 0x5a, 0x3b, 0x20, 0x8a, 0x8b,
	0x7c, 0x78, 0xc9, 0x4f, 0xec, 0x38, 0xeb, 0xab, 0xe1, 0x10, 0xa7, 0xa0, 0xfb, 0xde, 0x29, 0x4b,
	0x0f, 0xe0, 0xa8, 0x5a, 0xae, 0xb3, 0x66, 0x39, 0x3e, 0xb2, 0xe3, 0xac, 0x53, 0x68, 0xbd, 0xad,
	0xd4, 0x78, 0x63, 0xfc, 0x74, 0xbd, 0xad, 0x67, 0x32, 0xb8, 0x46, 0x4b, 0xde, 0x29, 0x63, 0x41,
	0xff, 0xf7, 0x54, 0xc1, 0x39, 0xcc, 0x46, 0xc6, 0x29, 0x6f, 0xd0, 0xe6, 0xfb, 0x2a, 0xf1, 0xce,
	0xa5, 0x7b, 0x3b, 0xff, 0x16, 0xc1, 0x7c, 0x29, 0xd8, 0x62, 0x29, 0xd8, 0xd7, 0x52, 0xb0, 0xd7,
	0x95, 0x08, 0x16, 0x2b, 0x11, 0x7c, 0xac, 0x44, 0x70, 0x7f, 0xb1, 0xd3, 0x69, 0x70, 0xd2, 0x42,
	0x0b, 0xf2, 0x8f, 0x8a, 0x9c, 0x6d, 0xe1, 0xe5, 0xe5, 0xc9, 0x7e, 0x0e, 0xe1, 0xea, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x41, 0x99, 0xf7, 0xed, 0xd7, 0x01, 0x00, 0x00,
}

func (m *TestObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumAllowedTransfers != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.NumAllowedTransfers))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestTimeConstrainedObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestTimeConstrainedObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestTimeConstrainedObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTest(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.NumAllowedTransfers != 0 {
		n += 1 + sovTest(uint64(m.NumAllowedTransfers))
	}
	return n
}

func (m *TestTimeConstrainedObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTest(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovTest(uint64(m.Expiration))
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllowedTransfers", wireType)
			}
			m.NumAllowedTransfers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllowedTransfers |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestTimeConstrainedObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestTimeConstrainedObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestTimeConstrainedObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
